Exercise 3.1
Pull sudoku.py and try running each of the algorithms on each of the predefined sudoku puzzles. Consider the following
questions:

a. Which algorithms work (in a timely manner) and which donâ€™t? Explain your results in terms of the capabilities (and
   implementations) of the algorithms and nature of the problems.

    ANSWER:
        DFS -
            easy_fig64a: not solved
            harder_aima_csp: Not solved
            hardest_escargot: not solved

            Explanation:
                DFS is a classical search algorithm that only looks for the possible goal state by populating the table
                unit-by-unit and checking if the populated board is a goal board. So, for a search space this big, it is
                highly unlikely for it find a solution for any of the problems in reasonable time.

        AC-3 -
            easy_fig64a: solved quickly
            harder_aima_csp: Not solved
            hardest_escargot: not solved

            Explanation:
                The algorithm looks at value in the current unit and eliminates values that violate sudoku's constraints
                from unit in its box, row, and column. For an easy puzzle (like easy_fig64a), it can reduce the domain of
                each unit to single values to quickly get to a solution. For harder problems (like harder_aima_csp and
                hardest_escargot), AC-3, trying to meet local constraints, could eliminate values important for the
                final solution(s).

        Backtracking search -

            easy_fig64a: Takes a while but reaches a solution.
            harder_aima_csp: Not solved
            hardest_escargot: not solved

            Explanation:
                This is because backtracking search is essentially a DFS that steps back when it finds a variable without
                legal values instead of populating the entire board before checking if there's something wrong. So, for
                easy problems with obvious conflicts, backtracking search can find a solution. However, for harder
                problems, it may be take a while for it to find conflicts early and its performance may be much worse.

        Minimum Conflicts -

            easy_fig64a: not solved
            harder_aima_csp: not solved
            hardest_escargot: not solved

            Explanation:
                It does not solve the problem. The algorithm starts with a complete assignment and adjusts the values of
                of variables in a way that minimizes conflicts, with the hope of eventually finding a solution with no
                conflicts. It resembles the hill-climbing solution and it may be "stuck" at a local minimum without
                reaching a solution.

b. What effect does configuring the settings for backtracking have on the results? Try the following:
    i. Set the variable/value ordering (i.e., the select_unassigned_variable parameter) to first-unassigned-variable
    (the default) or minimum-remaining-values (i.e., mrv).

        ANSWER:
        In theory, it should improve its performance by significantly by choosing the variable that has the least number
        of values in its domain. By choosing the most constraining variable early, it should reduce the find conflicts
        sooner without having to go much deeper in the search tree. But, it did not make much of a difference in this
        problem.

    ii. Set the inference (i.e., the inference parameter) to forward-checking (i.e., forward_checking).

        ANSWER:
        It improved the algorithm's performance significantly. It even solves hard_aima_csp in less than a minute.
        By making assigned nodes arc-consistent with unassigned ones, it reduces the search space significantly.

    Which, if any, of these settings should work best for sudoku? What combination of settings actually works the best?

        ANSWER:
        Forward-checking improves works best for sudoku. It does even better when its combined with
        minimum-remaining-values ordering. It can even solve the hardest problem.

Exercise 3.2
Pull queens.py and try running each of the algorithms with various values for n. Answer the following questions:

a. How large can n get for each of the algorithms? Why?

    ANSWER:
        DFS           = Could not solve n = 8 in reasonable time
        AC-3          = Could not solve any of the problems
        Back-tracking = Can solve up to n = 28 in reasonable time
        Min Conflicts = Can solve up to n = 5000 in reasonable time
b. What backtracking settings work the best? Why?

    ANSWER:
    Minimum-remaining-values ordering does better than forward-checking. By choosing the the most constrained queen,
    it can prune "unfruitful" branches from the search tree sooner and spend more time on promising paths.
    Forward-checking also reduces the branching factor by removing conflicting positions from the remaining unassigned
    queens. But, it does not backtrack until it has found a variable without any legal moves. So, it would be less

    Combined, Minimum-remaining-values ordering and forward checking significantly improve its performance and it can
    solve a problem with up to 500 queens.

c. How many steps does Min-Conflicts require to do its work? Why?

    ANSWER: 37

Exercise 3.3
Review the AIMA Python implementation for constraint satisfaction problems (CSP) as needed to do the following:

a. Compare and contrast the specifications for CSP (i.e., csp.CSP) and traditional problems (i.e., search.Problem). Be sure
   to consider the nature of states, domains, actions, results and goal tests.

   ANSWER:
   CSPs use variables, their domains, and constraints to define problems, while traditional problems are defined using
   states (including initial, and goal states or a goal test) and actions (and their cost) that change one state to another.

   CSPs can be represented as traditional problems by using tuples completely assigned variables as states and taking
   changing the values of variables as actions.

b. Compare and contrast the nature of the heuristics deployed in traditional and constraint-based problem solving.

   ANSWER:
   Traditional problems are generally graph-searching problems. So, the ordering of the actions taken to get to a goal
   state matters. So, the heuristics used for these solutions are to reduce the number of actions taken to achieve the
   a goal state.

   For CSPs, since the ordering of actions taken to get to a goal state does not matter, the heuristics are focused on
   assigning and reducing the domains of more variables sooner.