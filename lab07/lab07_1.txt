Exercise 7.1
Intro to Pandas — Complete these exercises (cf. the guide).

Questions:

a. Submit your solutions to exercises 1–2.

    Exercise #1

    Modify the cities table by adding a new boolean column that is True if and only if both of the following are True:
          The city is named after a saint.
          The city has an area greater than 50 square miles.

    ANSWER:
        cities["ex1"] = cities['Area square miles'].apply(lambda x: x > 50) &
            cities['City name'].apply(lambda x: x.startswith("San"))

    Exercise #2

    The reindex method allows index values that are not in the original DataFrame's index values. Try it and see what
    happens if you use such values! Why do you think this is allowed?

    ANSWER:
        The operation would insert NAN rows for the indexes that were not in the original index of the Dataframe/Series.
        This lets the user use any external list to make reorder the data-structures. However, if the input list doesn't
        contain an index value in either data structure, then that row would be dropped from the returned data structure.

b. Why would one use Pandas rather than the standard data manipulation features provided by NumPy?

    ANSWER:
        1. Pandas are column oriented and they let users create matrices (dataframes) with named columns. So, they are
           easier to understand and more intuitive.
        2. It's also much easier to do operations on particular features in data. Instead of operating on data at a spec
           index in multiple rows (like numpy matrices), Pandas let us efficiently do operations on a feature in multiple
           records (rows).
        2. Even if missing values are populated with NAN, Pandas let the user create matrices (dataframes) columns
           (series) which may originally have different sizes.
        3. Allow for applications of complex functions on data values using .apply.

c. Under what circumstances would it be useful to reorder/shuffle a Pandas DataFrame?

    ANSWER:
        1. Prevents over-fitting by removing bias that may result from having a particular order in the input
           data.